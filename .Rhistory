}
round(1.36/sqrt(nrow(df.train.num)),4)
round(1.36/sqrt(nrow(df.test.num)),4)
data.frame(variavel = as.character(ks.mat[,1]),
dn = as.numeric(ks.mat[,2]),
p_valor = as.numeric(ks.mat[,3])) %>%
arrange(desc(dn))
df.test.num
df.test
df.test.num
ks.mat <- matrix(NA,ncol = 3,nrow = 0,byrow = T)
colnames(ks.mat) <- c('variavel','dn','p_valor')
for(var in names(df.test.num)){
# output do test ks
estat.ks <-  ks.test(df.train.num[,var],df.test.num[,var])
# atribuição da estatistica Dn a variavel d
d <- as.numeric(unlist(round(estat.ks$statistic,4)))
# retorna o p-value em p
pv <- round(estat.ks$p.value,4)
# constrói a tabela ks.mat com as estatísticas obtidas
ks.mat <- rbind(ks.mat,c(variavel = var,dn = d ,p_valor = pv))
}
round(1.36/sqrt(nrow(df.train.num)),4)
round(1.36/sqrt(nrow(df.test.num)),4)
data.frame(variavel = as.character(ks.mat[,1]),
dn = as.numeric(ks.mat[,2]),
p_valor = as.numeric(ks.mat[,3])) %>%
arrange(desc(dn))
data.frame(variavel = as.character(ks.mat[,1]),
dn = as.numeric(ks.mat[,2]),
p_valor = as.numeric(ks.mat[,3])) %>%
arrange(desc(dn))
df.train.num %>%
select(X2ndFlrSF,GrLivArea,
TotRmsAbvGrd,LotArea) %>%
summary
df.test.num %>%
select(X2ndFlrSF,GrLivArea,
TotRmsAbvGrd,LotArea) %>%
summary
df.train.num %>%
select(-YearBuilt,-TotalBsmtSF,-X1stFlrSF,-GrLivArea) %>%
summary
df.test.num %>%
select(-YearBuilt,-TotalBsmtSF,-X1stFlrSF,-GrLivArea) %>%
summary
df.train.num[,names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')]
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')]
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:5] %>%
summary
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:8] %>%
summary
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:7] %>%
summary
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
df.test.num[,!names(df.test.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
df.test.num
df.test.num[,!names(df.test.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
round(max(df.train.num$LotArea)/max(df.test.num$LotArea),2)
ecdfplot(~ df.train.num$LotArea + df.test.num$LotArea,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
boxplot(df.train.num$LotArea,
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)]
boxplot(df.train.num$LotArea[df.train.num$LotArea <= max(df.test.num$LotArea)],
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
ecdfplot(~ df.train.num$LotArea + df.test.num$LotArea,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)]
df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)]
(n.outliers <- df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)])
par(mfrow=c(1,2))
df.train.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
df.test.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
par(mfrow=c(1,2))
df.train.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$GrLivArea)))
df.test.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$GrLivArea)))
par(mfrow=c(1,2))
df.train.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.test.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
sort(n.outliers)[1]
df.train <- df.train %>% filter(LotArea <= sort(n.outliers)[1])
df.train_fac <- df.train[,unlist(lapply(df.train,is.factor))]
df.test_fac  <-  df.test[,unlist(lapply(df.test,is.factor))]
f.prop <- function(fac.train,fac.test,var){
proptrain <- count(fac.train,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.train = round(100*n/sum(n),2))
names(proptrain) <- c(var,'n.train','perc.train')
proptest <- count(fac.test,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.test = round(100*n/sum(n),2))
names(proptest) <- c(var,'n.test','perc.test')
df.prop <- left_join(proptrain,proptest, by = var)[,c(1,2,4,3,5)] %>%
mutate(dif.perc = perc.train-perc.test)
return(df.prop)
}
for(j in 1:5){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
fac.test
df.test
ecdfplot(~ df.train.num$LotArea + df.test.num$LotArea,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
boxplot(df.train.num$LotArea,
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
(n.outliers <- df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)])
boxplot(df.train.num$LotArea[df.train.num$LotArea <= max(df.test.num$LotArea)],
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
par(mfrow=c(1,2))
df.train.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
df.test.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
par(mfrow=c(1,2))
df.train.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$GrLivArea)))
df.test.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$GrLivArea)))
par(mfrow=c(1,2))
df.train.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.test.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
include = TRUE,
fig.path = "figures/")
# Pacotes Utilizados
suppressMessages(library(MASS))
suppressMessages(library(tidyverse))
suppressMessages(library(readr))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(readxl))
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
suppressMessages(library(scales))
suppressMessages(library(tidyr))
suppressMessages(library(lubridate))
suppressMessages(library(ggpubr))
suppressMessages(library(corrplot))
suppressMessages(library(lattice))
suppressMessages(library(latticeExtra))
df.train <- fread('../outputs/df.train.csv',
sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T) %>%
select(Id,SalePrice,everything())
df.test <- fread('../outputs/df.test.csv',sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T)
p0 <- ggdensity(df.train, x = "SalePrice",
fill = "#0073C2FF", color = "black",
add = "mean", rug = TRUE) +
labs(title = 'Distribuição da densidade da variável SalePrice') +
theme_dark()
p1 <- ggplot(df.train, aes(x = SalePrice)) +
geom_histogram(bins = 100,
color = "black",
fill = "#0073C2FF") +
labs(title = 'Distribuição de frequência da variável SalePrice') +
theme_dark()
gridExtra::grid.arrange(p0,p1,nrow = 1)
df.train.num <- df.train[,!(unlist(lapply(df.train,class)) %in% 'character')][,-c(1,2)]
df.test.num  <-  df.test[,!(unlist(lapply(df.test,class)) %in% 'character')][,-1]
unlist(lapply(df.train,class)) %>% table
ks.mat <- matrix(NA,ncol = 3,nrow = 0,byrow = T)
colnames(ks.mat) <- c('variavel','dn','p_valor')
for(var in names(df.test.num)){
# output do test ks
estat.ks <-  ks.test(df.train.num[,var],df.test.num[,var])
# atribuição da estatistica Dn a variavel d
d <- as.numeric(unlist(round(estat.ks$statistic,4)))
# retorna o p-value em p
pv <- round(estat.ks$p.value,4)
# constrói a tabela ks.mat com as estatísticas obtidas
ks.mat <- rbind(ks.mat,c(variavel = var,dn = d ,p_valor = pv))
}
round(1.36/sqrt(nrow(df.train.num)),4)
round(1.36/sqrt(nrow(df.test.num)),4)
data.frame(variavel = as.character(ks.mat[,1]),
dn = as.numeric(ks.mat[,2]),
p_valor = as.numeric(ks.mat[,3])) %>%
arrange(desc(dn))
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
df.test.num[,!names(df.test.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
round(max(df.train.num$LotArea)/max(df.test.num$LotArea),2)
ecdfplot(~ df.train.num$LotArea + df.test.num$LotArea,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
boxplot(df.train.num$LotArea,
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
(n.outliers <- df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)])
boxplot(df.train.num$LotArea[df.train.num$LotArea <= max(df.test.num$LotArea)],
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
par(mfrow=c(1,2))
df.train.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
df.test.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
par(mfrow=c(1,2))
df.train.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$GrLivArea)))
df.test.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$GrLivArea)))
par(mfrow=c(1,2))
df.train.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.test.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.train <- df.train %>% filter(LotArea <= sort(n.outliers)[1])
df.train_fac <- df.train[,unlist(lapply(df.train,is.factor))]
df.test_fac  <-  df.test[,unlist(lapply(df.test,is.factor))]
df.train_fac <- df.train[,unlist(lapply(df.train,is.factor))]
df.test_fac  <-  df.test[,unlist(lapply(df.test,is.factor))]
f.prop <- function(fac.train,fac.test,var){
proptrain <- count(fac.train,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.train = round(100*n/sum(n),2))
names(proptrain) <- c(var,'n.train','perc.train')
proptest <- count(fac.test,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.test = round(100*n/sum(n),2))
names(proptest) <- c(var,'n.test','perc.test')
df.prop <- left_join(proptrain,proptest, by = var)[,c(1,2,4,3,5)] %>%
mutate(dif.perc = perc.train-perc.test)
return(df.prop)
}
fac.test
df.test_fac
df.test_fac
df.train_fac
par(mfrow=c(1,2))
df.train.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$GrLivArea)))
df.test.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$GrLivArea)))
par(mfrow=c(1,2))
df.train.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.test.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
include = TRUE,
fig.path = "figures/")
# Pacotes Utilizados
suppressMessages(library(MASS))
suppressMessages(library(tidyverse))
suppressMessages(library(readr))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(readxl))
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
suppressMessages(library(scales))
suppressMessages(library(tidyr))
suppressMessages(library(lubridate))
suppressMessages(library(ggpubr))
suppressMessages(library(corrplot))
suppressMessages(library(lattice))
suppressMessages(library(latticeExtra))
df.train <- fread('../outputs/df.train.csv',
sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T) %>%
select(Id,SalePrice,everything())
df.test <- fread('../outputs/df.test.csv',sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T)
p0 <- ggdensity(df.train, x = "SalePrice",
fill = "#0073C2FF", color = "black",
add = "mean", rug = TRUE) +
labs(title = 'Distribuição da densidade da variável SalePrice') +
theme_dark()
p1 <- ggplot(df.train, aes(x = SalePrice)) +
geom_histogram(bins = 100,
color = "black",
fill = "#0073C2FF") +
labs(title = 'Distribuição de frequência da variável SalePrice') +
theme_dark()
gridExtra::grid.arrange(p0,p1,nrow = 1)
df.train.num <- df.train[,!(unlist(lapply(df.train,class)) %in% 'character')][,-c(1,2)]
df.test.num  <-  df.test[,!(unlist(lapply(df.test,class)) %in% 'character')][,-1]
unlist(lapply(df.train,class)) %>% table
ks.mat <- matrix(NA,ncol = 3,nrow = 0,byrow = T)
colnames(ks.mat) <- c('variavel','dn','p_valor')
for(var in names(df.test.num)){
# output do test ks
estat.ks <-  ks.test(df.train.num[,var],df.test.num[,var])
# atribuição da estatistica Dn a variavel d
d <- as.numeric(unlist(round(estat.ks$statistic,4)))
# retorna o p-value em p
pv <- round(estat.ks$p.value,4)
# constrói a tabela ks.mat com as estatísticas obtidas
ks.mat <- rbind(ks.mat,c(variavel = var,dn = d ,p_valor = pv))
}
round(1.36/sqrt(nrow(df.train.num)),4)
round(1.36/sqrt(nrow(df.test.num)),4)
data.frame(variavel = as.character(ks.mat[,1]),
dn = as.numeric(ks.mat[,2]),
p_valor = as.numeric(ks.mat[,3])) %>%
arrange(desc(dn))
df.train.num[,!names(df.train.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
df.test.num[,!names(df.test.num) %in% c('YearBuilt','TotalBsmtSF','X1stFlrSF','GrLivArea')][,1:6] %>%
summary
round(max(df.train.num$LotArea)/max(df.test.num$LotArea),2)
ecdfplot(~ df.train.num$LotArea + df.test.num$LotArea,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
boxplot(df.train.num$LotArea,
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
(n.outliers <- df.train.num$LotArea[df.train.num$LotArea > max(df.test.num$LotArea)])
boxplot(df.train.num$LotArea[df.train.num$LotArea <= max(df.test.num$LotArea)],
df.test.num$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
par(mfrow=c(1,2))
df.train.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
df.test.num %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$X2ndFlrSF)))
par(mfrow=c(1,2))
df.train.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$GrLivArea)))
df.test.num %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$GrLivArea)))
par(mfrow=c(1,2))
df.train.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra treino',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.test.num %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra teste',
ylim = c(0,max(df.train.num$TotRmsAbvGrd)))
df.train_fac <- df.train[,unlist(lapply(df.train,is.factor))]
df.test_fac  <-  df.test[,unlist(lapply(df.test,is.factor))]
f.prop <- function(fac.train,fac.test,var){
proptrain <- count(fac.train,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.train = round(100*n/sum(n),2))
names(proptrain) <- c(var,'n.train','perc.train')
proptest <- count(fac.test,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.test = round(100*n/sum(n),2))
names(proptest) <- c(var,'n.test','perc.test')
df.prop <- left_join(proptrain,proptest, by = var)[,c(1,2,4,3,5)] %>%
mutate(dif.perc = perc.train-perc.test)
return(df.prop)
}
for(j in 1:5){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
df.train_fac
df.test_fac
names(df.train_fac)
df.train_fac <- df.train[,unlist(lapply(df.train,is.character))]
df.test_fac  <-  df.test[,unlist(lapply(df.test,is.character))]
f.prop <- function(fac.train,fac.test,var){
proptrain <- count(fac.train,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.train = round(100*n/sum(n),2))
names(proptrain) <- c(var,'n.train','perc.train')
proptest <- count(fac.test,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.test = round(100*n/sum(n),2))
names(proptest) <- c(var,'n.test','perc.test')
df.prop <- left_join(proptrain,proptest, by = var)[,c(1,2,4,3,5)] %>%
mutate(dif.perc = perc.train-perc.test)
return(df.prop)
}
for(j in 1:5){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
df.trai
for(j in 6:10){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
