model.test
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
include = TRUE,
fig.path = "figures/")
# Pacotes Utilizados
suppressMessages(library(MASS))
suppressMessages(library(tidyverse))
suppressMessages(library(readr))
suppressMessages(library(dplyr))
suppressMessages(library(data.table))
suppressMessages(library(readxl))
suppressMessages(library(ggplot2))
suppressMessages(library(plotly))
suppressMessages(library(scales))
suppressMessages(library(tidyr))
suppressMessages(library(lubridate))
suppressMessages(library(ggpubr))
suppressMessages(library(corrplot))
suppressMessages(library(lattice))
suppressMessages(library(latticeExtra))
df.train <- fread('../outputs/df.train.csv',
sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T) %>%
select(Id,SalePrice,everything())
tipo <- lapply(df.train,class)
df.train[,unlist(tipo) != 'integer'] <- data.frame(apply(df.train[,unlist(tipo)!='integer'],2,factor))
df.train
df.test <- fread('../outputs/df.test.csv',sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T)
tipo <- lapply(df.test,class)
df.test[,unlist(tipo) != 'integer'] <- data.frame(apply(df.test[,unlist(tipo)!='integer'],2,factor))
df.test
p0 <- ggdensity(df.train, x = "SalePrice",
fill = "#0073C2FF", color = "black",
add = "mean", rug = TRUE) +
labs(title = 'Distribuição da densidade da variável SalePrice') +
theme_dark()
p1 <- ggplot(df.train, aes(x = SalePrice)) +
geom_histogram(bins = 100,
color = "black",
fill = "#0073C2FF") +
labs(title = 'Distribuição de frequência da variável SalePrice') +
theme_dark()
gridExtra::grid.arrange(p0,p1,nrow = 1)
df.train_int <- df.train[,unlist(lapply(df.train,is.integer))] %>%
select(-Id,-SalePrice)
df.test_int  <- df.test[,unlist(lapply(df.test,is.integer))] %>%
select(-Id)
ks.mat <- matrix(NA,ncol = 3,nrow = 0,byrow = T)
colnames(ks.mat) <- c('variavel','dn','p_valor')
for(var in names(df.test_int[,-1])){
# output do test ks
estat.ks <-  ks.test(df.train_int[,var],df.test_int[,var])
# atribuição da estatistica Dn a variavel d
d <- as.numeric(unlist(round(estat.ks$statistic,4)))
# retorna o p-value em p
pv <- round(estat.ks$p.value,4)
# constrói a tabela ks.mat com as estatísticas obtidas
ks.mat <- rbind(ks.mat,c(variavel = var,dn = d ,p_valor = pv))
}
round(1.36/sqrt(nrow(df.train_int)),4)
round(1.36/sqrt(nrow(df.test_int)),4)
data.frame(variavel = as.character(ks.mat[,1]),
dn = as.numeric(ks.mat[,2]),
p_valor = as.numeric(ks.mat[,3])) %>%
arrange(desc(dn))
df.train_int %>%
select(X2ndFlrSF,GrLivArea,
TotRmsAbvGrd,LotArea) %>%
summary
df.test_int %>%
select(X2ndFlrSF,GrLivArea,
TotRmsAbvGrd,LotArea) %>%
summary
round(max(df.train_int$LotArea)/max(df.test_int$LotArea),2)
ecdfplot(~ df.train_int$LotArea + df.test_int$LotArea,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
boxplot(df.train_int$LotArea,
df.test_int$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
df.train_int$LotArea[df.train_int$LotArea > max(df.test_int$LotArea)]
boxplot(df.train_int$LotArea[df.train_int$LotArea <= max(df.test_int$LotArea)],
df.test_int$LotArea,
main = 'LotArea',
xlab = 'treino-teste')
par(mfrow=c(1,2))
df.train_int %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra treino',
ylim = c(0,max(df.train_int$X2ndFlrSF)))
df.test_int %>%
select(X2ndFlrSF) %>%
boxplot(main = 'X2ndFlrSF',
xlab = 'amostra teste',
ylim = c(0,max(df.train_int$X2ndFlrSF)))
par(mfrow=c(1,2))
df.train_int %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra treino',
ylim = c(0,max(df.train_int$GrLivArea)))
df.test_int %>%
select(GrLivArea) %>%
boxplot(main = 'GrLivArea',
xlab = 'amostra teste',
ylim = c(0,max(df.train_int$GrLivArea)))
par(mfrow=c(1,2))
df.train_int %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra treino',
ylim = c(0,max(df.train_int$TotRmsAbvGrd)))
df.test_int %>%
select(TotRmsAbvGrd) %>%
boxplot(main = 'TotRmsAbvGrd',
xlab = 'amostra teste',
ylim = c(0,max(df.train_int$TotRmsAbvGrd)))
df.train <- df.train %>% filter(LotArea <= max(df.test_int$LotArea))
df.train_fac <- df.train[,unlist(lapply(df.train,is.factor))]
df.test_fac  <-  df.test[,unlist(lapply(df.test,is.factor))]
f.prop <- function(fac.train,fac.test,var){
proptrain <- count(fac.train,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.train = round(100*n/sum(n),2))
names(proptrain) <- c(var,'n.train','perc.train')
proptest <- count(fac.test,eval(parse(text = var))) %>%
arrange(desc(n)) %>%
mutate(perc.test = round(100*n/sum(n),2))
names(proptest) <- c(var,'n.test','perc.test')
df.prop <- left_join(proptrain,proptest, by = var)[,c(1,2,4,3,5)] %>%
mutate(dif.perc = perc.train-perc.test)
return(df.prop)
}
for(j in 1:5){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
for(j in 6:10){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
for(j in 11:15){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
for(j in 16:20){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
count(df.train_fac,ExterCond)
count(df.test_fac,ExterCond)
for(j in 21:25){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
for(j in 26:30){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
for(j in 31:35){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
for(j in 36:38){
print(f.prop(df.train_fac,df.test_fac,names(df.train_fac)[j]))
cat('\n\n')
}
tipo <- lapply(df.train,class)
df.train[,unlist(tipo) != 'integer'] <-
data.frame(lapply(df.train[,unlist(tipo)!='integer'],function(x) as.character(unlist(x))), stringsAsFactors = F)
df.train <- df.train %>%
filter(!(Condition2 %in% c('RRNn','RRAe','RRAn')),
!(HouseStyle %in% c('2.5Fin')),
!(RoofMatl %in% c('Membran','Metal','Roll')),
!(Exterior1st %in% c('Stone','CBlock','ImStucc')),
!(Exterior2nd %in% c('AsphShn','Stone','CBlock','Other')),
!(Heating %in% c('Grav','OthW')),
!(Electrical %in% c('Grav','OthW')),
!(Functional %in% c('Sev')),
!(GarageQual %in% c('Ex')))
df.train
df.test$ExterCond <- as.character(unlist(df.test$ExterCond))
df.test <- df.test %>% filter(ExterCond != 'Po')
df.test
write.csv(df.train,'../outputs/model.train.csv')
write.csv(df.test,'../outputs/model.test.csv')
model.train <- fread('../outputs/model.train.csv',
sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T) %>%
select(Id,SalePrice,everything())
tipo <- lapply(model.train,class)
model.train[,unlist(tipo) != 'integer'] <- data.frame(apply(model.train[,unlist(tipo)!='integer'],2,factor))
model.train
fit.model = glm(SalePrice ~ MSSubClass + LotArea + OverallQual +
OverallCond + YearBuilt + YearRemodAdd + MasVnrArea + BsmtUnfSF +
TotalBsmtSF + X2ndFlrSF + GrLivArea + BsmtFullBath + BedroomAbvGr +
KitchenAbvGr + TotRmsAbvGrd + Fireplaces + GarageYrBlt +
GarageCars + GarageArea + WoodDeckSF + MSZoning + Neighborhood +
HouseStyle + Exterior1st + MasVnrType + ExterQual + BldgType +
Foundation + BsmtQual + BsmtExposure + BsmtFinType1 + HeatingQC +
CentralAir + KitchenQual + Functional + SaleCondition,
data = model.train,family=Gamma(link=identity))
summary(fit.model)
round(1-pchisq(13.611,1192, ncp = 0, lower.tail = TRUE, log.p = FALSE),3)
model.test <- fread('../outputs/model.test.csv',
sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T) %>%
select(Id,everything())
tipo <- lapply(model.test,class)
model.test[,unlist(tipo) != 'integer'] <- data.frame(apply(model.test[,unlist(tipo)!='integer'],2,factor))
model.test
predicao <- predict(fit.model,model.test)
latticeExtra::ecdfplot(~ fit.model$data$SalePrice + predicao,
auto.key=list(space='bottom',col = c('red','blue')),
col = c('red','blue'),
lwd = c(2,3),
xlab =" ",ylab = 'F(x)',
main = 'Distribuição Empírica Acumulada')
predicao <- data.frame(predicao)
p1 <- ggpubr::ggdensity(predicao, x = "predicao",
fill = "#0073C2FF", color = "black",
add = "mean", rug = TRUE) +
xlim(xlim = c(0,max(model.train$SalePrice)) ) +
ylim(ylim = c(0,8.0*10^(-6))) +
labs(title = 'Distribuição da densidade das predições') +
theme_dark()
p2 <- ggpubr::ggdensity(model.train, x = "SalePrice",
fill = "lightyellow", color = "black",
add = "mean", rug = TRUE) +
xlim(xlim = c(0,max(model.train$SalePrice)) ) +
ylim(ylim = c(0,8.0*10^(-6) )) +
labs(title = 'Distribuição da densidade da variável SalePrice') +
theme_dark()
gridExtra::grid.arrange(p1,p2,nrow = 1)
p3 <- ggplot(predicao, aes(x = predicao)) +
geom_histogram(bins = 100,
color = "black",
fill = "#0073C2FF") +
xlim(xlim = c(0,max(model.train$SalePrice)) ) +
ylim(ylim = c(0,100)) +
labs(title = 'Distribuição de frequência das predições') +
theme_dark()
p4 <- ggplot(model.train, aes(x = SalePrice)) +
geom_histogram(bins = 100,
color = "black",
fill = "lightyellow") +
xlim(xlim = c(0,max(model.train$SalePrice)) ) +
ylim(ylim = c(0,100)) +
labs(title = 'Distribuição de frequência da variável SalePrice') +
theme_dark()
gridExtra::grid.arrange(p3,p4,nrow = 1)
plot(fit.model$data$SalePrice,
predicao$predicao,
col = c('blue','red'),
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Valores Preditos',
main = 'SalesPrice vs Valores Preditos')
plot(fit.model$data$SalePrice,
fit.model$fitted.values,
col = c('blue','red'),
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Valores Preditos',
main = 'SalesPrice vs Valores Preditos')
abline(0,1)
legend('topleft',legend = c('SalePrice','Predição'),col = c('blue','red'), lty = c(2,2) )
plot(fit.model$residuals, pch = 20, type = 'p', main = 'Resíduos')
rss <- sum((fit.model$residuals)^2)  ## soma dos quadrados dos resíduos
tss <- sum((fit.model$data$SalePrice - mean(fit.model$data$SalePrice))^2)  ## soma total dos quadrados
(r.square <- 1-rss/tss)
sqrt(mean((fit.model$residuals)^2))
plot(fit.model$data$SalePrice,
fit.model$fitted.values,
col = c('blue','red'),
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Valores Ajustados',
main = 'SalesPrice vs Valores Preditos')
abline(0,1)
legend('topleft',legend = c('SalePrice','Valores ajustados'),col = c('blue','red'), lty = c(2,2) )
plot(fit.model$data$SalePrice,
col = 'black',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Valores Ajustados',
main = 'Valores reais de SalesPrice')
layout(matrix(c(1,1,2,3), ncol = 2, nrow = 2, byrow = T))
plot(fit.model$data$SalePrice,
col = 'black',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores',
main = 'Valores reais de SalesPrice')
plot(fit.model$fitted.values,
col = 'blue',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores Ajustados',
main = 'Valores Ajustados de SalesPrice')
plot(predicao$predicao,
col = 'red',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores Preditos',
main = 'Valores Preditos com df.test para SalesPrice')
layout(matrix(c(1,1,2,2,3,3), ncol = 2, nrow = 3, byrow = T))
plot(fit.model$data$SalePrice,
col = 'black',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores',
main = 'Valores reais de SalesPrice')
plot(fit.model$fitted.values,
col = 'blue',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores Ajustados',
main = 'Valores Ajustados de SalesPrice')
plot(predicao$predicao,
col = 'red',
pch = 20,
type = 'p',
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores Preditos',
main = 'Valores Preditos com df.test para SalesPrice')
layout(matrix(c(1,1,2,2,3,3), ncol = 2, nrow = 3, byrow = T))
plot(fit.model$data$SalePrice,
col = 'black',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores',
main = 'Valores reais de SalesPrice')
plot(fit.model$fitted.values,
col = 'blue',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores Ajustados',
main = 'Valores Ajustados de SalesPrice')
plot(predicao$predicao,
col = 'red',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
ylab = 'Variabilidade dos valores Preditos',
main = 'Valores Preditos com df.test para SalesPrice')
layout(matrix(c(1,1,2,2,3,3), ncol = 2, nrow = 3, byrow = T))
plot(fit.model$data$SalePrice,
col = 'black',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
main = 'Valores reais de SalesPrice')
plot(fit.model$fitted.values,
col = 'blue',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
main = 'Valores Ajustados de SalesPrice')
plot(predicao$predicao,
col = 'red',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
main = 'Valores Preditos com df.test para SalesPrice')
layout(matrix(c(1,1,2,2,3,3), ncol = 2, nrow = 3, byrow = T))
plot(fit.model$data$SalePrice,
col = 'black',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
ylab = '',
main = 'Valores reais de SalesPrice')
plot(fit.model$fitted.values,
col = 'blue',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
ylab = '',
main = 'Valores Ajustados de SalesPrice')
plot(predicao$predicao,
col = 'red',
pch = 20,
type = 'p',
ylim = c(0,7*10^5),
xlab = 'SalePrice',
ylab = '',
main = 'Valores Preditos com df.test para SalesPrice')
length(predicao$predicao)
plot(sort(predicao$predicao),sort(fit.model$fitted.values)[1:length(1318)] )
plot(sort(predicao$predicao),sort(fit.model$fitted.values)[1:1318] )
qqplot(sort(predicao$predicao),sort(fit.model$fitted.values)[1:1318])
qqplot(sort(predicao$predicao),sort(fit.model$data$SalePrice)[1:1318])
abline(0,1)
qqplot(sort(predicao$predicao),sort(fit.model$data$SalePrice)[1:1318])
abline(0,1)
qqplot(sort(predicao$predicao),
sort(fit.model$data$SalePrice)[1:1318],
main = 'QQ-plot')
abline(0,1)
qqplot(sort(fit.model$data$SalePrice)[1:1318],
sort(predicao$predicao),
main = 'QQ-plot',
ylab = 'Predição',
xlab = 'SalePrice')
abline(0,1)
qqplot(sort(fit.model$data$SalePrice)[1:1318],
sort(predicao$predicao),
main = 'QQ-plot',
ylab = 'Predição',
xlab = 'SalePrice',
col = c('blue','red') )
abline(0,1)
predicao
cbind(Id = model.test$Id),SalePrice = predicao)
cbind(Id = model.test$Id,SalePrice = predicao)
model.test$Id
data.frame(Id = model.test$Id,SalePrice = predicao, row.names = F)
data.frame(Id = model.test$Id,SalePrice = predicao, row.names = NULL)
data.frame(Id = model.test$Id,SalePrice = predicao$predicao, row.names = NULL)
datasubmission <- data.frame(Id = model.test$Id,SalePrice = predicao$predicao, row.names = NULL)
datasubmission <- data.frame(Id = model.test$Id,SalePrice = predicao$predicao, row.names = NULL)
write.csv(datasubmission,'../outputs/saleprice_submission.csv')
write.csv(datasubmission,'../outputs/saleprice_submission.csv',row.names = F)
datasubmission <- data.frame(Id = model.test$Id,SalePrice = predicao$predicao)
datasubmission
datasubmission <- data.frame(Id = model.test$Id,SalePrice = predicao$predicao)
write.csv(datasubmission,'../outputs/saleprice_submission.csv',row.names = F)
submit.glm <- data.frame(Id = model.test$Id,SalePrice = predicao$predicao)
submit.glm <- as.data.frame(Id = model.test$Id,SalePrice = predicao$predicao)
submit.glm <- as.data.frame(Id = model.test$Id,SalePrice = predicao$predicao)
submit.glm <- data.frame(Id = model.test$Id,SalePrice = predicao$predicao, stringsAsFactors = F)
write.csv(submit.glm, file="saleprice_glm.csv",row.names = FALSE,quote=FALSE)
submit.glm
write.csv(submit.glm, file="../outputs/saleprice_glm.csv",row.names = FALSE,quote=FALSE)
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
include = TRUE,
fig.path = "figures/")
suppressMessages(library(MASS))
suppressMessages(library(tidyverse))
suppressMessages(library(data.table))
suppressMessages(library(caret))
suppressMessages(library(parallelMap))
suppressMessages(library(farff))
suppressMessages(library(ROCR))
suppressMessages(library(pROC))
suppressMessages(library(ggplot2))
suppressMessages(library(ranger))
suppressMessages(library(lattice))
suppressMessages(library(latticeExtra))
suppressMessages(library(C50))
suppressMessages(library(kernlab))
suppressMessages(library(mlbench))
suppressMessages(library(randomForest))
suppressMessages(library(caretEnsemble))
suppressMessages(library(klaR))
suppressMessages(library(MLmetrics))
suppressMessages(library(mlr))
suppressMessages(library(FSelector))
suppressMessages(library(Boruta))
suppressMessages(library(ggpubr))
suppressMessages(library(gridExtra))
model.train <- fread('../outputs/model.train.csv',
sep=",",
showProgress = FALSE)[,-1] %>%
data.frame(stringsAsFactors = T) %>%
select(Id,SalePrice,everything())
tipo <- lapply(model.train,class)
model.train[,unlist(tipo) != 'integer'] <- data.frame(apply(model.train[,unlist(tipo)!='integer'],2,factor))
model.train
set.seed(2510)
boruta_output <- Boruta(SalePrice ~ ., data=model.train[,-1], doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% c("Confirmed", "Tentative")])  # collect
print(boruta_signif)
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")
resample_results
