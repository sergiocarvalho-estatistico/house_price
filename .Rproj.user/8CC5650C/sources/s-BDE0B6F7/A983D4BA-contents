---
title: "House Price - Data Prep"
author: "Sérgio Carvalho"
date: "`r format(Sys.Date(), '%d %B, %Y')`"
output:
  rmdformats::readthedown:
    self_contained: true
    thumbnails: true
    lightbox: true
    gallery: false
    highlight: zenburn 
    code_folding: show
    style_body: justify
    df_print: paged
    number_sections: yes
    toc_float:
      collapsed: yes
      smooth_scroll: yes
editor_options: 
    chunk_output_type: inline
---


```{r options-chunk, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      eval = TRUE, 
                      message = FALSE,
                      warning = FALSE, 
                      include = TRUE,
                      fig.path = "figures/",
                      fig.width = 15, 
                      fig.height = 6)
```


```{r pacotes-selecionados, message=FALSE, warning=FALSE, include=F}

  suppressMessages(library(MASS))
  suppressMessages(library(tidyverse))
  suppressMessages(library(readr))
  suppressMessages(library(dplyr))
  suppressMessages(library(data.table))
  suppressMessages(library(readxl))
  suppressMessages(library(ggplot2))
  suppressMessages(library(plotly))
  suppressMessages(library(scales))
  suppressMessages(library(lubridate))
  suppressMessages(library(reshape)) 
  suppressMessages(library(Boruta))
  suppressMessages(library(caret))
  suppressMessages(library(skimr))
  suppressMessages(library(RANN))

```

# Objetivos

  * Número de variáveis: 81 
  * Tipo de variáveis
      * * Inteiras ou discretas: 
      * * Numéricas ou double
      * * Categóricas
      * * Qualitativas
      * Qualidade dos dados          
      * * Quantidade de NA's por variável
  * Criação de novas variáveis, se precisar
  * Transformação das variáveis, se precisar


# Conjunto de Dados



## Dados de treinamento 

```{r read-data-train}
# Read table 
df.train <- data.table::fread('../dados/train.csv', 
                              sep=",", 
                              showProgress = FALSE) %>% 
            data.frame(stringsAsFactors = F)
df.train
```


# Há quantos tipo de dados ?

```{r metadados}
lapply(df.train,class) %>%
  unlist %>% as.character() %>% table
```


## Dados tipo inteiro

```{r type-integer}
df.int <- df.train[,unlist(lapply(df.train,is.integer))]
df.int
```

# Resumo dos dados 

```{r resumo-dos-dados}
skim_to_wide(df.int) %>% arrange(desc(missing))
```

veja que há valores nulos presente na amostra, minha estratégia será remover variáveis que possuam muitos valores nulos e imputar dados para as variáveis com poucos valores nulos.  


## Pré-Seleção das Variáveis inteiras

```{r fig.width=15, fig.height=6}
set.seed(2510)
boruta.int <- Boruta(SalePrice ~ ., data=na.omit(df.int[,-1]), doTrace=2)  # perform Boruta search
```

```{r select-cols-int}
cols.int <- names(boruta.int$finalDecision[boruta.int$finalDecision %in% c("Confirmed", "Tentative")])  # collect
```

## Plot da importância da variável

```{r fig.width=15, fig.height=6}
plot(boruta.int, cex.axis=.7, las=2, xlab="", main="Variable Importance")
```

# Selecionando as variáveis inteiras

```{r select-vars-inteiras}
df.int <- df.int[,c('Id',"SalePrice",cols.int)]
```

# Qualidade dos dados

## Tipo inteiro: % de valores nulos

```{r values-nulls, fig.width=15, fig.height=7}
apply(is.na(df.int),2,
            function(x) round(100*sum(as.numeric(x))/length(x),2)) %>% 
            sort(decreasing = T)
```

De forma geral podemos concluir que não há muitos valores nulos para as variáveis do tipo inteiro, sendo que apenas a variável LotFrontage apresenta cerca de 17.74 % de valores ausentes e como há uma série de outras variáveis mais importantes que esta, decido por remove-la. 

## Removendo a variável LotFrontage 

```{r remove-vars-lotfrontage}
df.int <- df.int %>% select(-LotFrontage)
```

## Imputando dados com knn

Criando um modelo com o knn para imputar dados.


```{r imput-data-with-knn-int}
preProcess_missingdata_model <- preProcess(df.int[,-c(1,2)], method='knnImpute')
preProcess_missingdata_model
```

Vamos agora usar esse modelo para prever os valores ausentes df.int

```{r}
df.int1 <- predict(preProcess_missingdata_model, newdata = df.int[,-c(1,2)] )
anyNA(df.int1)
```

Todos os valores ausentes foram imputados com sucesso, agora vamos juntar as colunas Id e SalesPrice com df.int1

```{r}
df.int <- cbind(df.int[,c(1,2)],df.int1)
```

Convertento dados tipo string para tipo categórico

```{r type-str}
df.fac <- df.train[,unlist(lapply(df.train,is.character))] %>%
          apply(2,as.factor) %>% 
          data.frame()
```


## Tipo Categorical: % de valores nulos

```{r values-nulos-factor, fig.width=15, fig.height=7}
apply(is.na(df.fac),2,function(x) round(100*sum(as.numeric(x))/length(x),2)) %>% 
           sort(decreasing = T)
```

Veja que as variáveis PoolQC, MiscFeature, Alley, Fence e FireplaceQu não nos deixam outra alternativa senão a remoção delas do conjunto de dados, pois neste caso, a imputação de dados seria um grande problema na propagação do erro considerando as incertezas associadas aos métodos de imputação.

## Selecão de Variável Tipo String:

  * PoolQC
  * MiscFeature
  * Alley
  * Fence
  * FireplaceQu

  
```{r select-vars-string}
df.fac <- df.fac %>% 
            select(-PoolQC,-MiscFeature,
                   -Alley,-Fence,-FireplaceQu)
df.fac
```


## Pré-Seleção das Variáveis Categóricas

```{r fig.width=15, fig.height=6}
set.seed(2510)
boruta_fac <- Boruta(SalePrice ~ ., data=na.omit(data.frame(SalePrice = df.int[,'SalePrice'],df.fac)), doTrace=2)  # perform Boruta search
```

```{r}
cols.fac <- names(boruta_fac$finalDecision[boruta_fac$finalDecision %in% c("Confirmed", "Tentative")])  
```

## Plot da importância da variável

```{r fig.width=15, fig.height=6}
plot(boruta_fac, cex.axis=.7, las=2, xlab="", main="Variable Importance")
```

# Variáveis selecionadas df.fac 

```{r vars-select-df-fac}
df.fac <- df.fac[,cols.fac]
```


```{r values-nulos, fig.width=15, fig.height=7}
apply(is.na(df.fac),2,function(x) round(100*sum(as.numeric(x))/length(x),2)) %>% 
           sort(decreasing = T)
```

Como ainda estamos com valores nulos recorremos ao caret para imputar essas categorias. 


Para construir um modelo que imput a categoria vamos retirar todas as variáveis que possuem alguma porcentagem de valores nulos e deixar somente uma delas em cada modelo. 

## Criando os data frames

```{r dfgaragetype-fac}
df.GarageType <- df.fac %>% select(-GarageFinish,-GarageCond,
                                   -BsmtExposure,-BsmtQual,
                                   -BsmtCond,-BsmtFinType1,
                                   -MasVnrType,-Electrical)
```


```{r GarageFinish-fac}
df.GarageFinish <- df.fac %>% select(-GarageType,-GarageCond,
                                     -BsmtExposure,-BsmtQual,
                                     -BsmtCond,-BsmtFinType1,
                                     -MasVnrType,-Electrical)
```


```{r GarageCond-fac}
df.GarageCond <- df.fac %>% select(-GarageType,-GarageFinish,
                                   -BsmtExposure,-BsmtQual,
                                   -BsmtCond,-BsmtFinType1,
                                   -MasVnrType,-Electrical)
```


```{r -BsmtExposure-fac}
df.BsmtExposure <- df.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtQual,
                                     -BsmtCond,-BsmtFinType1,
                                     -MasVnrType,-Electrical)
```


```{r BsmtQual-fac}
df.BsmtQual <- df.fac %>% select(-GarageType,-GarageFinish,
                                  -GarageCond,-BsmtExposure,
                                  -BsmtCond,-BsmtFinType1,
                                  -MasVnrType,-Electrical)
```


```{r BsmtCond-fac}
df.BsmtCond <- df.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtFinType1,
                                     -MasVnrType,-Electrical)
```


```{r BsmtFinType1-fac}
df.BsmtFinType1 <- df.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -MasVnrType,-Electrical)
```


```{r MasVnrType-fac}
df.MasVnrType <- df.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -BsmtFinType1,-Electrical)
```


```{r Electrical-fac}
df.Electrical <- df.fac %>% select(-GarageType,-GarageFinish,
                                   -GarageCond,-BsmtExposure,
                                   -BsmtQual,-BsmtCond,
                                   -BsmtFinType1,-MasVnrType)
```


## Usando o Random Forest


```{r - fitcontrol-fac}
set.seed(12345)
fitControl <- trainControl(method="cv", 
                           number=3, 
                           savePredictions = 'final',
                           classProbs= F, 
                           summaryFunction = multiClassSummary)
```


```{r rf-GarageType-fac, message=FALSE, warning=FALSE}
set.seed(12345)
# Train the model using rf
rf.GarageType = train(GarageType ~ ., data= na.omit(df.GarageType), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.GarageFinish = train(GarageFinish ~ ., data= na.omit(df.GarageFinish), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.GarageCond = train(GarageCond ~ ., data= na.omit(df.GarageCond), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtExposure = train(BsmtExposure ~ ., data= na.omit(df.BsmtExposure), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtQual = train(BsmtQual ~ ., data= na.omit(df.BsmtQual), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtCond = train(BsmtCond ~ ., data= na.omit(df.BsmtCond), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtFinType1 = train(BsmtFinType1 ~ ., data= na.omit(df.BsmtFinType1), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.MasVnrType = train(MasVnrType ~ ., data= na.omit(df.MasVnrType), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.Electrical = train(Electrical ~ ., data= na.omit(df.Electrical), 
                                      tuneLength=5,trControl = fitControl,method='rf')
```

A função abaixo automatiza o processo de impute das categoricas nos valores nulos de cada variável.

```{r funcao-impute-fac}
f.pred <- function(fac,df.var,rf.model,var){ 

  new.df <- df.var[is.na(df.var[,var]),!(names(df.var) %in% var)]
  pred_rf <- predict(rf.model, newdata =  new.df)
  fac[is.na(fac[,var]),var] <- pred_rf

  return(df.fac)
}
```

# Colocando tudo em listas

```{r df.vars-rf.vars-listas-fac}
list.rfvars <- list(rf.GarageType,rf.GarageFinish,
                    rf.GarageCond,rf.BsmtExposure,
                    rf.BsmtQual,rf.BsmtCond,
                    rf.BsmtFinType1,rf.MasVnrType,
                    rf.Electrical)

list.dfvars <- list(df.GarageType,df.GarageFinish,
                    df.GarageCond,df.BsmtExposure,
                    df.BsmtQual,df.BsmtCond,
                    df.BsmtFinType1,df.MasVnrType,
                    df.Electrical)

vars <- c('GarageType','GarageFinish',
          'GarageCond','BsmtExposure',
          'BsmtQual','BsmtCond',
          'BsmtFinType1','MasVnrType',
          'Electrical')
```

Imputando os valores categóricos

```{r impute-vategorico-vars-fac}
for(j in 1:9) df.fac <- f.pred(df.fac,list.dfvars[[j]],list.rfvars[[j]],vars[j])
```



# Juntandos os data frames

Jutando os dados tipo inteiros e string.

```{r bind-dfs-fac}
df.train <- bind_cols(df.int,df.fac)
df.train
```


Agora nosso df.train encontra-se limpo e pronto para ser explorado.


# Dados de teste

Iremos realizar nos dados de teste as mesmas transformações aplicadas aos dados de treino.  

```{r read-data-test}
df.test <- data.table::fread('../dados/test.csv', 
                             sep=",", 
                             showProgress = FALSE)  %>% 
            data.frame(stringsAsFactors = F)
df.test
```


# Separando o conjunto de dados de teste pelo tipo.

## Dados tipo inteiro

```{r type-integer-test}
test.int <- df.test[,unlist(lapply(df.test,class)) %in% "integer"]
test.int
```

na amostra test.int também iremos imputar dados.

```{r}
apply(is.na(test.int),2,function(x) round(100*sum(as.numeric(x))/length(x),2)) %>% 
           sort(decreasing = T)
```

# Selecionando as variáveis

Removendo as mesmas variáveis do conjunto de treinamento.

```{r select-vars}
test.int <- test.int[,c('Id',cols.int)] %>%
                        select(-LotFrontage)
```

```{r imput-data-with-knn}
preProcess_missingdata_model <- preProcess(test.int[,-1], method='knnImpute')
preProcess_missingdata_model
```


Vamos agora usar esse modelo para prever os valores ausentes df.int

```{r}
test.int1 <- predict(preProcess_missingdata_model, newdata = test.int[,-1] )
anyNA(test.int1)
```

```{r}
test.int <- data.frame(Id = test.int$Id,test.int1)
```


## Tranformando dados tipo string em categorical

```{r type-str-test}
test.fac <- df.test[,unlist(lapply(df.test,class)) %in% "character"] %>%
                           apply(2,as.factor) %>% data.frame
```


removendo as mesas colunas do conjunto de treino.

```{r}
test.fac <- test.fac %>% select(-PoolQC,-MiscFeature,
                                -Alley,-Fence,-FireplaceQu)

test.fac <- test.fac[,cols.fac]
```

verificando a porcentagem de valores nulos


```{r percent-null-rows-test}
apply(is.na(test.fac),2,function(x) round(100*sum(as.numeric(x))/length(x),2)) %>% 
           sort(decreasing = T)
```



Novamente recorremos ao caret para imputar essas categorias. 


Para construir um modelo que imput a categoria vamos retirar todas as variáveis que possuem alguma poercentagem de valores nulos e deixar somente uma dela em cada modelo. 

## Criando os data frames


```{r dfgaragetype}
df.GarageType <- test.fac %>% select(-GarageFinish,-GarageCond,
                                     -BsmtExposure,-BsmtQual,
                                     -BsmtCond,-BsmtFinType1,
                                     -MasVnrType,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)
```


```{r GarageFinish}
df.GarageFinish <- test.fac %>% select(-GarageType,-GarageCond,
                                     -BsmtExposure,-BsmtQual,
                                     -BsmtCond,-BsmtFinType1,
                                     -MasVnrType,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)
```


```{r GarageCond}
df.GarageCond <- test.fac %>% select(-GarageType,-GarageFinish,
                                   -BsmtExposure,-BsmtQual,
                                   -BsmtCond,-BsmtFinType1,
                                   -MasVnrType,
                                   -MSZoning,-Functional,
                                   -Exterior1st,-Exterior2nd,
                                   -KitchenQual)
```


```{r -BsmtExposure}
df.BsmtExposure <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtQual,
                                     -BsmtCond,-BsmtFinType1,
                                     -MasVnrType,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)

```


```{r BsmtQual}
df.BsmtQual <- test.fac %>% select(-GarageType,-GarageFinish,
                                  -GarageCond,-BsmtExposure,
                                  -BsmtCond,-BsmtFinType1,
                                  -MasVnrType,
                                  -MSZoning,-Functional,
                                  -Exterior1st,-Exterior2nd,
                                  -KitchenQual)

```


```{r BsmtCond}
df.BsmtCond <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtFinType1,
                                     -MasVnrType,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)

```


```{r BsmtFinType1}
df.BsmtFinType1 <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -MasVnrType,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)

```


```{r MasVnrType}
df.MasVnrType <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -BsmtFinType1,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)
```


```{r MSZoning}
df.MSZoning <- test.fac %>% select(-GarageType,-GarageFinish,
                                 -GarageCond,-BsmtExposure,
                                 -BsmtQual,-BsmtCond,
                                 -BsmtFinType1,-MasVnrType,
                                 -Functional,
                                 -Exterior1st,-Exterior2nd,
                                 -KitchenQual)
```


```{r Functional}
df.Functional <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -BsmtFinType1,-MasVnrType,
                                     -MSZoning,
                                     -Exterior1st,-Exterior2nd,
                                     -KitchenQual)
```


```{r Exterior1st}
df.Exterior1st <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -BsmtFinType1,-MasVnrType,
                                     -MSZoning,
                                     -Functional,-Exterior2nd,
                                     -KitchenQual)
```


```{r Exterior2nd}
df.Exterior2nd <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -BsmtFinType1,-MasVnrType,
                                     -MSZoning,-Functional,
                                     -Exterior1st,-KitchenQual)
```


```{r KitchenQua}
df.KitchenQual <- test.fac %>% select(-GarageType,-GarageFinish,
                                     -GarageCond,-BsmtExposure,
                                     -BsmtQual,-BsmtCond,
                                     -BsmtFinType1,-MasVnrType,
                                     -MSZoning,
                                     -Functional,-Exterior1st,
                                     -Exterior2nd)
```



## Usando o Random Forest


```{r - fitcontrol}
set.seed(12345)
fitControl <- trainControl(method="cv", 
                           number=3, 
                           savePredictions = 'final',
                           classProbs= F, 
                           summaryFunction = multiClassSummary)
```


```{r rf-GarageType, message=FALSE, warning=FALSE}
set.seed(12345)
# Train the model using rf
rf.GarageType = train(GarageType ~ ., data= na.omit(df.GarageType), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.GarageFinish = train(GarageFinish ~ ., data= na.omit(df.GarageFinish), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.GarageCond = train(GarageCond ~ ., data= na.omit(df.GarageCond), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtExposure = train(BsmtExposure ~ ., data= na.omit(df.BsmtExposure), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtQual = train(BsmtQual ~ ., data= na.omit(df.BsmtQual), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtCond = train(BsmtCond ~ ., data= na.omit(df.BsmtCond), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.BsmtFinType1 = train(BsmtFinType1 ~ ., data= na.omit(df.BsmtFinType1), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.MasVnrType = train(MasVnrType ~ ., data= na.omit(df.MasVnrType), 
                                      tuneLength=5,trControl = fitControl,method='rf')


rf.MSZoning = train(MSZoning ~ ., data= na.omit(df.MSZoning), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.Functional = train(Functional ~ ., data= na.omit(df.Functional), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.Exterior1st = train(Exterior1st ~ ., data= na.omit(df.Exterior1st), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.Exterior2nd = train(Exterior2nd ~ ., data= na.omit(df.Exterior2nd), 
                                      tuneLength=5,trControl = fitControl,method='rf')

rf.KitchenQual = train(KitchenQual ~ ., data= na.omit(df.KitchenQual), 
                                      tuneLength=5,trControl = fitControl,method='rf')
```

A função abaixo automatiza o processo de impute das categoricas nos valores nulos de cada variável.

```{r funcao-impute}
f.pred <- function(fac,df.var,rf.model,var){ 

  new.df <- df.var[is.na(df.var[,var]),!(names(df.var) %in% var)]
  pred_rf <- predict(rf.model, newdata =  new.df)
  fac[is.na(fac[,var]),var] <- pred_rf

  return(fac)
}
```

# Colocando tudo em listas

```{r df.vars-rf.vars-listas}
list.rfvars <- list(rf.GarageType,rf.GarageFinish,
                    rf.GarageCond,rf.BsmtExposure,
                    rf.BsmtQual,rf.BsmtCond,
                    rf.BsmtFinType1,rf.MasVnrType,
                    rf.MSZoning,rf.Functional,
                    rf.Exterior1st,rf.Exterior2nd,rf.KitchenQual)

list.dfvars <- list(df.GarageType,df.GarageFinish,
                    df.GarageCond,df.BsmtExposure,
                    df.BsmtQual,df.BsmtCond,
                    df.BsmtFinType1,df.MasVnrType,
                    df.MSZoning,df.Functional,
                    df.Exterior1st,df.Exterior2nd,df.KitchenQual)

vars <- c('GarageType','GarageFinish',
          'GarageCond','BsmtExposure',
          'BsmtQual','BsmtCond',
          'BsmtFinType1','MasVnrType',
          'MSZoning','Functional','Exterior1st',
          'Exterior2nd','KitchenQual')
```

Imputando os valores categóricos

```{r impute-vategorico-vars}
for(j in 1:length(vars)) test.fac <- f.pred(test.fac,list.dfvars[[j]],list.rfvars[[j]],vars[j])
```


# Juntandos os data frames

Jutando os dados tipo inteiros e categóricos.

```{r bind-dfs-test}
df.test <- bind_cols(test.int,test.fac)
df.test
```



Agora com 1319 linhas nosso df.test encontra-se limpo e pronto para ser explorado.


# Exportando os dados limpos

```{r output-data}
write.csv(df.train,'../outputs/df.train.csv')
write.csv(df.test,'../outputs/df.test.csv')
```


